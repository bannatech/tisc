TISCv2.0 (c) Paul Longtine <paul@nanner.co>
Tiny Instruction Set Computer

 __________   ___      ________       ________
|\___   ___\ |\  \    |\   ____\     |\   ____\
\|___ \  \_| \ \  \   \ \  \___|_    \ \  \___|
     \ \  \   \ \  \   \ \_____  \    \ \  \
      \ \  \   \ \  \   \|____|\  \    \ \  \____
       \ \__\   \ \__\    ____\_\  \    \ \_______\
        \|__|    \|__|   |\_________\    \|_______| v2.0
                         \|_________|

-----------------------------------------------------------------------<--------
RAW      - memonic - description
-----------------------------------------------------------------------<--------
00000000 - SOP_ADD    ----- SetOp ADD, flag if overflow
00010000 - SOP_SUB    ----- SetOp SUB, A-B and flag if sign is positive 
00100000 - SOP_AND    ----- SetOp AND, A&B and flag if the output is nonzero
00110000 - SOP_XOR    ----- SetOp XOR, A^B and flag if the output is nonzero
01000000 - SOP_XNOR   ----- SetOp XNOR, ~(A^B) and flag if the output is nonzero
01010000 - SOP_CIN    ----- SetOp CIN, CMP will A+B+1 and flag if overflow
01100000 - SOP_LSH    ----- SetOp LSH, lshift A by B bits, flag if overflow
01110000 - SOP_RSH    ----- SetOp RSH, rshift A by B bits, flag if underflow 
11110000 - PTRINC     ----- Increment pointer by 1
C B A 00 - OR         ----- C = A | B
C B A 01 - NAND       ----- C = A nand B
C B A 10 - OP         ----- C = A (OP) B - perform operation set by SOP_*
C B 0010 - CIN        ----- C = ++B
00<lo>11 - LLI        ----- Load lower immediate to GRA
01000011 - LI         ----- Load byte immediate to GRA 
01<nb>11 - LNI        ----- Load <nb> length immediate to stack
10000011 - JMP        ----- JMP to address in next program word if flag is false
10010011 - PSH        ----- Push GRA to stack
10100011 - POP        ----- Pop stack to reg GRA
10110011 - PCR        ----- Get current line and save to register GRC
10B 0111 - LB         ----- Load word from mem pointer to ARGB GPR
10B 1011 - SB         ----- Store contents of ARGB GPR to mem pointer
10B 1111 - SP         ----- Set pointer ARGB GPR
11B A 11 - CMP        ----- Computes flag on set operation

-----------------------------------------------------------------------<--------
C = Arguement C / ARGC
B = Arguement B / ARGB
A = Arguement A / ARGA

GRA = General Purpose Register A = 0b01
GRB = General Purpose Register B = 0b10
GRC = General Purpose Register C = 0b11
